// +build ignore

// This program generates embed.go. It can be invoked by running `go generate`
package main

import (
	"log"
	"os"
	"path/filepath"
	"text/template"
	"time"
)

var packageTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
// This file was generated by go at {{ .Timestamp }}
package main

import (
	"embed"
)

// Embed Next.js exported site
{{- range $index, $element := .Files }}
//go:embed {{ . }}
{{- end }}
var content embed.FS
`))

func main() {
	log.Println("Creating: embed.go")
	f, err := os.Create("embed.go")
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()

	root := "client/out"
	var files []string
	log.Printf("Looking for files in: %s", root)
	err = filepath.Walk(root, visit(&files))
	if err != nil {
		panic(err)
	}

	packageTemplate.Execute(f, struct {
		Timestamp time.Time
		Files     []string
	}{
		Timestamp: time.Now(),
		Files:     files,
	})
}

func visit(files *[]string) filepath.WalkFunc {
	return func(path string, info os.FileInfo, err error) error {
		if err != nil {
			log.Fatal(err)
		}
		if info.IsDir() != true {
			log.Printf("Found file: %s\n", path)
			*files = append(*files, path)
		}
		return nil
	}
}
